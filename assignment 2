{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question no 01"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a program which takes 5 inputs from user for different subjectâ€™s\n",
    "marks, total it and generate mark sheet using grades ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter marks out of 100:78\n",
      "Enter marks out of 100:78\n",
      "Enter marks out of 100:78\n",
      "Enter marks out of 100:89\n",
      "Enter marks out of 100:89\n",
      " ########## MARK SHEET ###########  \n",
      "Mathematics Marks :  78 \n",
      "English Marks :  78 \n",
      "Urdu :  78 \n",
      "Islamiat :  89 \n",
      "Sindhi :  89\n",
      "Grade is A+\n",
      "Pass\n"
     ]
    }
   ],
   "source": [
    "Mathematics=int(input(\"Enter marks out of 100:\"))\n",
    "english=int(input(\"Enter marks out of 100:\"))\n",
    "Urdu=int(input(\"Enter marks out of 100:\"))\n",
    "Islamiat=int(input(\"Enter marks out of 100:\"))\n",
    "Sindhi=int(input(\"Enter marks out of 100:\"))\n",
    "total_marks=500\n",
    "print(\" ########## MARK SHEET ########### \",\"\\nMathematics Marks : \",Mathematics,\"\\nEnglish Marks : \",english,\"\\nUrdu : \",Urdu,\"\\nIslamiat : \",Islamiat,\"\\nSindhi : \",Sindhi)\n",
    "Marks_Obtained=Mathematics+english+Urdu+Islamiat+Sindhi\n",
    "Percentage=(Marks_Obtained/total_marks)*100\n",
    "if (Percentage>=80 and Percentage<=100):\n",
    "        print(\"Grade is A+\\nPass\")\n",
    "elif (Percentage<80 and Percentage>=70):\n",
    "        print(\"Grade is A\\nPass\")\n",
    "elif (Percentage<70 and Percentage>=60):\n",
    "        print(\"Grade is B\\nPass\")\n",
    "elif (Percentage<60 and Percentage>=50):\n",
    "        print(\"Grade is C\\nPass\")\n",
    "elif (Percentage<50 and Percentage>=40):\n",
    "        print(\"Grade is D\\nPass\")\n",
    "else:\n",
    "        print(\"Grade is F\\nFail\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question no 02"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a program which take input from user and identify that the given\n",
    "number is even or odd?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter number: 55\n",
      "55  is odd number\n"
     ]
    }
   ],
   "source": [
    "num=int(input(\"enter number: \"))\n",
    "if num%2==0:\n",
    "    print(num, \" is even number\")\n",
    "else:\n",
    "    print(num, \" is odd number\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question no 03"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a program which print the length of the list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter range :4\n",
      "Enter : 2\n",
      "Enter : 3\n",
      "Enter : 4\n",
      "Enter : 5\n",
      "[2, 3, 4, 5]\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "r=int(input('Enter range :'))\n",
    "for i in range(r):\n",
    "    s=int(input('Enter : '))\n",
    "    l.append(s)\n",
    "print(l)\n",
    "print(len(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question no 04"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to sum all the numeric items in a list?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter range :3\n",
      "Enter : 2\n",
      "Enter : 2\n",
      "Enter : 3\n",
      "[2, 2, 3]\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "r=int(input('Enter range :'))\n",
    "for i in range(r):\n",
    "    s=int(input('Enter : '))\n",
    "    l.append(s)\n",
    "print(l)\n",
    "print(sum(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question no 05"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a Python program to get the largest number from a numeric list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter range :3\n",
      "Enter : 4\n",
      "Enter : 5\n",
      "Enter : 7\n",
      "[4, 5, 7]\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "l=[]\n",
    "r=int(input('Enter range :'))\n",
    "for i in range(r):\n",
    "    s=int(input('Enter : '))\n",
    "    l.append(s)\n",
    "print(l)\n",
    "print(max(l))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question no 06"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Take a list, say for example this one:\n",
    "a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n",
    "and write a program that prints out all the elements of the list that are\n",
    "less than 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n",
      "2\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n",
    "for i in range(len(a)):\n",
    "    if a[i]<5:\n",
    "        print(a[i])\n",
    "    else: None\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
